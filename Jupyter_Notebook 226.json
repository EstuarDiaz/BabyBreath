{
    "cells": [
        {
            "source": [
                "#### New to Plotly?\n",
                "Plotly's Python library is free and open source! [Get started](https://plot.ly/python/getting-started/) by downloading the client and [reading the primer](https://plot.ly/python/getting-started/).\n",
                "<br>You can set up Plotly to work in [online](https://plot.ly/python/getting-started/#initialization-for-online-plotting) or [offline](https://plot.ly/python/getting-started/#initialization-for-offline-plotting) mode, or in [jupyter notebooks](https://plot.ly/python/getting-started/#start-plotting-online).\n",
                "<br>We also have a quick-reference [cheatsheet](https://images.plot.ly/plotly-documentation/images/python_cheat_sheet.pdf) (new!) to help you get started!"
            ],
            "metadata": {},
            "cell_type": "markdown"
        },
        {
            "source": [
                "#### Network reflecting coappearances of characters in <br>Victor Hugo's novel Les Miserables"
            ],
            "metadata": {},
            "cell_type": "markdown"
        },
        {
            "source": [
                "We define our graph as an `igraph.Graph` object. [Python `igraph`](hhttp://igraph.org/python/)\n",
                "is a library for high-performance graph generation  and analysis."
            ],
            "metadata": {},
            "cell_type": "markdown"
        },
        {
            "source": [
                "import igraph as ig"
            ],
            "outputs": [],
            "metadata": {},
            "cell_type": "code",
            "execution_count": 1
        },
        {
            "source": [
                "Read graph data from a `json` file:"
            ],
            "metadata": {},
            "cell_type": "markdown"
        },
        {
            "source": [
                "import json\n",
                "import urllib2\n",
                "\n",
                "data = []\n",
                "req = urllib2.Request(\"https://raw.githubusercontent.com/plotly/datasets/master/miserables.json\")\n",
                "opener = urllib2.build_opener()\n",
                "f = opener.open(req)\n",
                "data = json.loads(f.read())\n",
                "\n",
                "print data.keys()"
            ],
            "outputs": [
                {
                    "name": "stdout",
                    "text": [
                        "[u'nodes', u'links']\n"
                    ],
                    "output_type": "stream"
                }
            ],
            "metadata": {},
            "cell_type": "code",
            "execution_count": 2
        },
        {
            "source": [
                "Get the number of nodes:"
            ],
            "metadata": {},
            "cell_type": "markdown"
        },
        {
            "source": [
                "N=len(data['nodes'])\n",
                "N"
            ],
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "77"
                        ]
                    },
                    "metadata": {},
                    "output_type": "execute_result",
                    "execution_count": 3
                }
            ],
            "metadata": {},
            "cell_type": "code",
            "execution_count": 3
        },
        {
            "source": [
                "Define the list of edges and the Graph object from Edges:"
            ],
            "metadata": {},
            "cell_type": "markdown"
        },
        {
            "source": [
                "L=len(data['links'])\n",
                "Edges=[(data['links'][k]['source'], data['links'][k]['target']) for k in range(L)]\n",
                "\n",
                "G=ig.Graph(Edges, directed=False)"
            ],
            "outputs": [],
            "metadata": {},
            "cell_type": "code",
            "execution_count": 4
        },
        {
            "source": [
                "Extract the node attributes, 'group', and 'name':"
            ],
            "metadata": {},
            "cell_type": "markdown"
        },
        {
            "source": [
                "data['nodes'][0]"
            ],
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "{u'group': 1, u'name': u'Myriel'}"
                        ]
                    },
                    "metadata": {},
                    "output_type": "execute_result",
                    "execution_count": 5
                }
            ],
            "metadata": {},
            "cell_type": "code",
            "execution_count": 5
        },
        {
            "source": [
                "labels=[]\n",
                "group=[]\n",
                "for node in data['nodes']:\n",
                "    labels.append(node['name'])\n",
                "    group.append(node['group'])"
            ],
            "outputs": [],
            "metadata": {},
            "cell_type": "code",
            "execution_count": 6
        },
        {
            "source": [
                "Get the node positions, set by the Kamada-Kawai layout for 3D graphs:"
            ],
            "metadata": {},
            "cell_type": "markdown"
        },
        {
            "source": [
                "layt=G.layout('kk', dim=3) "
            ],
            "outputs": [],
            "metadata": {},
            "cell_type": "code",
            "execution_count": 7
        },
        {
            "source": [
                "`layt` is a list of three elements lists (the coordinates of nodes):"
            ],
            "metadata": {},
            "cell_type": "markdown"
        },
        {
            "source": [
                "layt[5]"
            ],
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "[4.195949332184983, 1.172321178571202, -2.5543268281789135]"
                        ]
                    },
                    "metadata": {},
                    "output_type": "execute_result",
                    "execution_count": 8
                }
            ],
            "metadata": {},
            "cell_type": "code",
            "execution_count": 8
        },
        {
            "source": [
                "Set data for the Plotly plot of the graph:"
            ],
            "metadata": {},
            "cell_type": "markdown"
        },
        {
            "source": [
                "Xn=[layt[k][0] for k in range(N)]# x-coordinates of nodes\n",
                "Yn=[layt[k][1] for k in range(N)]# y-coordinates\n",
                "Zn=[layt[k][2] for k in range(N)]# z-coordinates\n",
                "Xe=[]\n",
                "Ye=[]\n",
                "Ze=[]\n",
                "for e in Edges:\n",
                "    Xe+=[layt[e[0]][0],layt[e[1]][0], None]# x-coordinates of edge ends\n",
                "    Ye+=[layt[e[0]][1],layt[e[1]][1], None]  \n",
                "    Ze+=[layt[e[0]][2],layt[e[1]][2], None]  "
            ],
            "outputs": [],
            "metadata": {},
            "cell_type": "code",
            "execution_count": 9
        },
        {
            "source": [
                "import plotly.plotly as py\n",
                "import plotly.graph_objs as go\n",
                "\n",
                "trace1=go.Scatter3d(x=Xe,\n",
                "               y=Ye,\n",
                "               z=Ze,\n",
                "               mode='lines',\n",
                "               line=dict(color='rgb(125,125,125)', width=1),\n",
                "               hoverinfo='none'\n",
                "               )\n",
                "\n",
                "trace2=go.Scatter3d(x=Xn,\n",
                "               y=Yn,\n",
                "               z=Zn,\n",
                "               mode='markers',\n",
                "               name='actors',\n",
                "               marker=dict(symbol='circle',\n",
                "                             size=6,\n",
                "                             color=group,\n",
                "                             colorscale='Viridis',\n",
                "                             line=dict(color='rgb(50,50,50)', width=0.5)\n",
                "                             ),\n",
                "               text=labels,\n",
                "               hoverinfo='text'\n",
                "               )\n",
                "\n",
                "axis=dict(showbackground=False,\n",
                "          showline=False,\n",
                "          zeroline=False,\n",
                "          showgrid=False,\n",
                "          showticklabels=False,\n",
                "          title=''\n",
                "          )\n",
                "\n",
                "layout = go.Layout(\n",
                "         title=\"Network of coappearances of characters in Victor Hugo's novel<br> Les Miserables (3D visualization)\",\n",
                "         width=1000,\n",
                "         height=1000,\n",
                "         showlegend=False,\n",
                "         scene=dict(\n",
                "             xaxis=dict(axis),\n",
                "             yaxis=dict(axis),\n",
                "             zaxis=dict(axis),\n",
                "        ),\n",
                "     margin=dict(\n",
                "        t=100\n",
                "    ),\n",
                "    hovermode='closest',\n",
                "    annotations=[\n",
                "           dict(\n",
                "           showarrow=False,\n",
                "            text=\"Data source: <a href='http://bost.ocks.org/mike/miserables/miserables.json'>[1] miserables.json</a>\",\n",
                "            xref='paper',\n",
                "            yref='paper',\n",
                "            x=0,\n",
                "            y=0.1,\n",
                "            xanchor='left',\n",
                "            yanchor='bottom',\n",
                "            font=dict(\n",
                "            size=14\n",
                "            )\n",
                "            )\n",
                "        ],    )"
            ],
            "outputs": [],
            "metadata": {},
            "cell_type": "code",
            "execution_count": 10
        },
        {
            "source": [
                "data=[trace1, trace2]\n",
                "fig=go.Figure(data=data, layout=layout)\n",
                "\n",
                "py.iplot(fig, filename='Les-Miserables')"
            ],
            "outputs": [
                {
                    "data": {
                        "text/html": [
                            "<iframe id=\"igraph\" scrolling=\"no\" style=\"border:none;\" seamless=\"seamless\" src=\"https://plot.ly/~priyatharsan/186.embed\" height=\"1000px\" width=\"1000px\"></iframe>"
                        ],
                        "text/plain": [
                            "<plotly.tools.PlotlyDisplay object>"
                        ]
                    },
                    "metadata": {},
                    "output_type": "execute_result",
                    "execution_count": 11
                }
            ],
            "metadata": {},
            "cell_type": "code",
            "execution_count": 11
        },
        {
            "source": [
                "#### Reference\n",
                "See https://plot.ly/python/reference/#scatter3d for more information and chart attribute options!"
            ],
            "metadata": {},
            "cell_type": "markdown"
        },
        {
            "source": [],
            "outputs": [],
            "metadata": {},
            "cell_type": "code",
            "execution_count": null
        }
    ],
    "metadata": {
        "kernelspec": {
            "name": "python2",
            "language": "python",
            "display_name": "Python 2"
        },
        "language_info": {
            "name": "python",
            "version": "2.7.14",
            "mimetype": "text/x-python",
            "file_extension": ".py",
            "pygments_lexer": "ipython2",
            "codemirror_mode": {
                "name": "ipython",
                "version": 2
            },
            "nbconvert_exporter": "python"
        },
        "anaconda-cloud": {}
    },
    "nbformat": 4,
    "nbformat_minor": 1
}